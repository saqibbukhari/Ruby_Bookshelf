require 'digest/sha2'

class User < ActiveRecord::Base
	attr_accessible :name, :pass, :pass_confirmation
	
	validates :name, :presence => true, :uniqueness => true
	validates :pass, :confirmation => true
	attr_accessor :pass_confirmation
	attr_reader :pass

	validate :password_must_be_present
	
	def User.authenticate(name, pass)
		if user = find_by_name(name)
			if user.password == encrypt_password(pass, user.salt)
				user
			end
		end
	end

	def User.encrypt_password(pass, salt)
		Digest::SHA2.hexdigest(pass + "wibble" + salt)
	end

# 'password' is a virtual attribute
	def pass=(pass)
		@pass = pass
		if pass.present?
			generate_salt
			self.password = self.class.encrypt_password(pass, salt)
		end
	end

	private

	def password_must_be_present
		errors.add(:pass, "Missing password") unless password.present?
	end

	def generate_salt
		self.salt = self.object_id.to_s + rand.to_s
	end
end

=begin
require 'digest/sha2'

class User < ActiveRecord::Base
  attr_accessible :name, :pass, :pass_confirmation
  
  validates :name, :presence => true, :uniqueness => true
  validates :pass, :pass_confirmation => true
  attr_accessor :pass_confirmation
  attr_reader   :pass

  validate :password_must_be_present

  def User.authenticate(name, pass)
	if user = find_by_name(name)
		if user.password == encrypt_password(pass, user.salt)
			user
		end
	end
  end

  def User.encrypt_password(pass, salt)
	Digest::SHA2.hexdigest(pass + "wibble" + salt)
  end

  def pass=(pass)
	@pass = pass
	if pass.present?
		generate_salt
		self.password = self.class.encrypt_password(pass, salt)
	end
  end



  private
  
  def password_must_be_present
	errors.add(:pass, "Missing password") unless password.present?
  end
  def generate_salt
	self.salt = self.object_id.to_s + rand.to_s
  end
end
=end
